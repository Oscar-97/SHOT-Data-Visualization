{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://datavisualization/./Src/Scripts/DataProcessing/FilterData.ts","webpack://datavisualization/./Src/Scripts/Main.ts","webpack://datavisualization/./Src/Scripts/Table/TableFilters.ts","webpack://datavisualization/./Src/Scripts/Table/TableDisplayData.ts","webpack://datavisualization/./Src/Scripts/Table/TableSearch.ts","webpack://datavisualization/./Src/Scripts/Table/TableDownloadCSV.ts","webpack://datavisualization/./Src/Scripts/Chart/CreateChart.ts"],"sourcesContent":["// Filter the instance and solvers.\r\nexport function GetInstanceAndSolvers(data) {\r\n    let TempData1 = data.split(\"\\|\");\r\n    let TempData2 = TempData1.filter(item => item);\r\n    for (var i = TempData2.length - 1; i >= 0; i--) {\r\n        TempData2[i] = TempData2[i].replace(/\\s+/g, \"\");\r\n    }\r\n    let ReturnData = TempData2;\r\n    return ReturnData.slice(0, -1);\r\n}\r\n// Filter the data labels.\r\nexport function GetDataLabels(data) {\r\n    // Get the solver names.\r\n    let ReturnData = data.split(\" \");\r\n    // Remove extra 'bound' in array when splitting.\r\n    let TempData = ReturnData.filter(function (value) {\r\n        return value != \"bound\";\r\n    });\r\n    // Remove \"|\" and \"#\".\r\n    let TempData2 = TempData.map(function (value) {\r\n        return value.replace(/[I| #]/g, '');\r\n    });\r\n    // Remove blanks.\r\n    let TempData3 = TempData2.filter(item => item);\r\n    // Add back 'bound/I' with function, and clean up the rest of the content.\r\n    for (var i = 0; i < TempData3.length; i++)\r\n        if (TempData3[i] === \"Primal\") {\r\n            TempData3[i] = \"Primal bound\";\r\n        }\r\n        else if (TempData3[i] === \"Dual\") {\r\n            TempData3[i] = \"Dual bound\";\r\n        }\r\n        else if (TempData3[i] === \"Nodes\") {\r\n            TempData3[i] = \"Nodes I\";\r\n        }\r\n    ReturnData = TempData3;\r\n    // Remove last /r in array before returning the data.\r\n    return ReturnData.slice(0, -1);\r\n}\r\n// Filter the problems.\r\nexport function GetProblems(data) {\r\n    let ReturnData = data.split(\" \");\r\n    // Remove blanks.\r\n    let TempData = ReturnData.filter(item => item);\r\n    // Remove \"|\".\r\n    let TempData2 = TempData.map(function (value) {\r\n        return value.replace(/[|]/g, '');\r\n    });\r\n    ReturnData = TempData2;\r\n    // Remove last /r in array and return data.\r\n    return ReturnData.slice(0, -1);\r\n}\r\n","//import { ImportData } from './DataProcessing/ImportData.js'; // Only for accessing files without using upload.\r\nimport { TableDisplayData } from './Table/TableDisplayData';\r\nimport { TableFilters } from './Table/TableFilters';\r\nimport { TableSearch } from './Table/TableSearch';\r\nimport { TableDownloadCSV } from './Table/TableDownloadCSV';\r\nimport { GetInstanceAndSolvers, GetDataLabels, GetProblems } from './DataProcessing/FilterData';\r\nimport { CreateChart } from './Chart/CreateChart';\r\n// Set input value for file upload to empty at load.\r\ndocument.getElementById('fileInput').value = '';\r\n// Get the elements.\r\nconst FileInput = document.getElementById('fileInput');\r\nconst ImportDataButton = document.getElementById('importDataButton');\r\nconst SelectAllButton = document.getElementById(\"selectAllButton\");\r\nconst ViewSelectionButton = document.getElementById(\"viewSelectionButton\");\r\nconst ViewPlotsButton = document.getElementById('viewPlotsButton');\r\n// Store all RawData here.\r\nconst RawData = [];\r\n// Click on the upload data button to start the process.\r\nImportDataButton.addEventListener(\"click\", function () {\r\n    // Remove existing Solvers and the search bar when uploading a new result file.\r\n    try {\r\n        document.querySelectorAll('.form-check').forEach(solver => { solver.remove(); });\r\n        document.getElementById('tableSearch').remove();\r\n        document.getElementById('downloadCSVButton').remove();\r\n    }\r\n    catch (_a) { }\r\n    // Change the statuses of the buttons after uploading the data.\r\n    SelectAllButton.disabled = false;\r\n    if (document.title == \"Report\") {\r\n        ViewSelectionButton.disabled = false;\r\n    }\r\n    else if (document.title == \"Plots\") {\r\n        ViewPlotsButton.disabled = false;\r\n    }\r\n    ImportDataButton.disabled = true;\r\n    // Run the remaining functions.\r\n    ManageData();\r\n});\r\n// Read the data from the input file.\r\nFileInput.addEventListener('change', function () {\r\n    ImportDataButton.disabled = false;\r\n    let Reader = new FileReader();\r\n    Reader.addEventListener('load', function () {\r\n        RawData.length = 0;\r\n        // Split the file's text into an array of lines\r\n        let lines = Reader.result.split('\\n');\r\n        // Iterate over the lines array and process each line as needed\r\n        for (let i = 0; i < lines.length; i++) {\r\n            let line = lines[i];\r\n            RawData.push(line);\r\n        }\r\n    });\r\n    // Read the file as text\r\n    Reader.readAsText(FileInput.files[0]);\r\n});\r\n// Get the solvers that are marked as checked.\r\nfunction GetCheckedSolvers() {\r\n    let FilterSolvers = document.getElementsByTagName(\"input\");\r\n    let CheckedSolvers = [];\r\n    for (let Solver of FilterSolvers) {\r\n        if (Solver.checked) {\r\n            CheckedSolvers.push(Solver.id);\r\n        }\r\n    }\r\n    console.log(CheckedSolvers);\r\n    return CheckedSolvers;\r\n}\r\n// Compare checked solvers versus full list of solvers.\r\nfunction GetComparisonArray(CheckedSolvers, Solvers) {\r\n    const ComparisonArray = [];\r\n    for (let i = 0; i < Solvers.length; i++) {\r\n        if (CheckedSolvers.includes(Solvers[i])) {\r\n            ComparisonArray[i] = \"Used\";\r\n        }\r\n        else {\r\n            ComparisonArray[i] = \"NotUsed\";\r\n        }\r\n    }\r\n    console.log(ComparisonArray);\r\n    return ComparisonArray;\r\n}\r\n// Sort the text file and display the relevant elements per page.\r\nfunction ManageData() {\r\n    // Import the data.\r\n    //const SolvedData = ImportData(\"../../solvedata.txt\"); // TEMP: Path to local file without upload.\r\n    const SolvedData = RawData;\r\n    // First row of the data:\r\n    const Instance = GetInstanceAndSolvers(SolvedData[0]).shift(); // Instance is at Index 0.\r\n    const Solvers = GetInstanceAndSolvers(SolvedData[0]).slice(1); // Solvers are in the rest of the indices.\r\n    // Second row of the data:\r\n    const DataLabels = GetDataLabels(SolvedData[1]); // Data labels.\r\n    const InstanceLabels = DataLabels.splice(0, 7); // Only instance categories.\r\n    // Third row and onwards of the data:\r\n    const ProblemAndResults = GetProblems(SolvedData[3]); // Problem and the results.\r\n    let FirstProblem = 3; // The problems from the specified row.\r\n    // List of problems.\r\n    const ProblemList = [];\r\n    for (var i = FirstProblem; i < SolvedData.length; i++) {\r\n        ProblemList.push(GetProblems(SolvedData[i])[0]);\r\n    }\r\n    // List of results.\r\n    const ResultsData = [];\r\n    for (FirstProblem; FirstProblem < SolvedData.length; FirstProblem++) {\r\n        ResultsData.push(GetProblems(SolvedData[FirstProblem]).slice(1));\r\n    }\r\n    //#region Printing information of the data.\r\n    console.log(\"Total number of rows in the data file: \\n\" + SolvedData.length);\r\n    console.log(\"Solvers: \\n\", Solvers);\r\n    console.log(\"Number of filtered data labels: \", DataLabels.length);\r\n    console.log(\"Data labels: \\n\", DataLabels);\r\n    console.log(\"Instance categories: \\n\", InstanceLabels);\r\n    console.log(\"Filtered results for problem: \\n\", ProblemAndResults[0], \"results: \", ProblemAndResults.slice(1));\r\n    //#endregion\r\n    // Create the solver filters, displayed in the element with the id: tableFilters.\r\n    TableFilters(Solvers);\r\n    // Select all checkboxes button functionality.\r\n    SelectAllButton.addEventListener(\"click\", function () {\r\n        let FilterSolvers = document.getElementsByTagName(\"input\");\r\n        for (let Solver of FilterSolvers) {\r\n            if (!Solver.checked && Solver.id != \"fileInput\") {\r\n                Solver.click();\r\n            }\r\n        }\r\n        SelectAllButton.disabled = true;\r\n    });\r\n    // Display the data in the div with the id \"dataTable\" when clicking on the view selection button\r\n    if (document.title == \"Report\") {\r\n        ViewSelectionButton.addEventListener(\"click\", function () {\r\n            let CheckedSolvers = GetCheckedSolvers();\r\n            let ComparisonArray = GetComparisonArray(CheckedSolvers, Solvers);\r\n            TableDisplayData(Instance, CheckedSolvers, InstanceLabels, DataLabels, ProblemList, ResultsData, ComparisonArray);\r\n            SelectAllButton.disabled = false;\r\n            // Create the input search element after generating the table.\r\n            const InputSearch = document.getElementById(\"tableSearch\");\r\n            InputSearch.value = \"\";\r\n            InputSearch.oninput = () => {\r\n                TableSearch();\r\n            };\r\n            // Create a save CSV button after generating the table.\r\n            const DownloadCSVButton = document.getElementById(\"downloadCSVButton\");\r\n            DownloadCSVButton.addEventListener(\"click\", () => TableDownloadCSV());\r\n        });\r\n    }\r\n    // Filter and display the data in plots when clicking on the view plots button.\r\n    if (document.title == \"Plots\") {\r\n        const ViewPlotsButton = document.getElementById('viewPlotsButton');\r\n        ViewPlotsButton.addEventListener(\"click\", function () {\r\n            let CheckedSolvers = GetCheckedSolvers();\r\n            let ComparisonArray = GetComparisonArray(CheckedSolvers, Solvers);\r\n            console.log(\"Sending to CreateChart.\");\r\n            CreateChart(Solvers, ResultsData, ComparisonArray);\r\n            SelectAllButton.disabled = false;\r\n        });\r\n    }\r\n}\r\n","export function TableFilters(Solvers) {\r\n    for (var i = 0; i < Solvers.length; i++) {\r\n        // Create filter form div.\r\n        const FilterCheckboxes = document.createElement('div');\r\n        FilterCheckboxes.className = \"form-check form-check-inline\";\r\n        // Create filter labels.\r\n        const FilterLabels = document.createElement('label');\r\n        FilterLabels.className = \"form-check-label\";\r\n        FilterLabels.innerText = Solvers[i];\r\n        // Create input buttons.\r\n        const FilterInput = document.createElement('input');\r\n        FilterInput.className = 'form-check-input';\r\n        FilterInput.type = \"checkbox\";\r\n        FilterInput.id = Solvers[i];\r\n        // Append elements.\r\n        FilterCheckboxes.appendChild(FilterInput);\r\n        FilterCheckboxes.appendChild(FilterLabels);\r\n        document.getElementById('tableFilters').appendChild(FilterCheckboxes);\r\n    }\r\n}\r\n","export function TableDisplayData(Instance, Solvers, InstanceLabels, DataLabels, Problems, ResultsData, ComparisonArray) {\r\n    // Check if comparison array is used or not used, then remove 8 elements from Datalabels and in each row of ResultsData.\r\n    let NewResultsData;\r\n    let NewDataLabels;\r\n    console.log(\"NewDataLabels length: \", NewDataLabels);\r\n    console.log(\"NewResultsData length: \", NewResultsData);\r\n    // New data labels.\r\n    NewDataLabels = [];\r\n    ComparisonArray.forEach((element, index) => {\r\n        if (element === \"Used\") {\r\n            // Remove DataLabels that are not used.\r\n            // Start index to end index.\r\n            const StartLabel = index * 8;\r\n            const EndLabel = index * 8 + 8;\r\n            let tempArray = [];\r\n            tempArray = DataLabels.slice(StartLabel, EndLabel);\r\n            tempArray.forEach(element => {\r\n                NewDataLabels.push(element);\r\n            });\r\n        }\r\n    });\r\n    // Set the columns to always use the instance data.\r\n    const ColumnsToUse = [0, 1, 2, 3, 4, 5];\r\n    // Check which solvers to use.\r\n    ComparisonArray.forEach((element, index) => {\r\n        const StartValue = index * 8 + 6;\r\n        const EndValue = index * 8 + 14;\r\n        if (element === \"Used\") {\r\n            for (let i = StartValue; i < EndValue; i++) {\r\n                ColumnsToUse.push(i);\r\n            }\r\n        }\r\n    });\r\n    console.log(\"Columns to use: \", ColumnsToUse);\r\n    NewResultsData = ResultsData.map((r) => ColumnsToUse.map(i => r[i]));\r\n    console.log(\"NewResultsData after modifications: \", NewResultsData);\r\n    // Empty the div that will contain the dataTable.\r\n    const DataTableDiv = document.getElementById(\"dataTable\");\r\n    DataTableDiv.innerHTML = \"\";\r\n    // Create thead with instance and solvers.\r\n    let InstanceSolversThead = \"<thead class='thead-dark' <tr>\" + \"<th colspan='7'>\" + Instance + \"</th>\";\r\n    for (let i = 0; i < Solvers.length; i++) {\r\n        InstanceSolversThead += \"<th colspan='8'>\" + Solvers[i] + \"</th>\";\r\n    }\r\n    InstanceSolversThead += \"</tr></thead>\";\r\n    // Create the thead with instance and data labels.\r\n    let ResultThead = \"<thead class='thead-dark' id='datalabelsThead'><tr>\";\r\n    for (let i = 0; i < InstanceLabels.length; i++) {\r\n        ResultThead += \"<th scope='col'>\" + InstanceLabels[i] + \"</th>\";\r\n    }\r\n    for (let i = 0; i < NewDataLabels.length; i++) {\r\n        ResultThead += \"<th>\" + NewDataLabels[i] + \"</th>\";\r\n    }\r\n    ResultThead += \"</tr></thead>\";\r\n    let DataTable = \"<tbody>\";\r\n    console.log(\"Problems length: \", Problems.length);\r\n    for (let i = 0; i < Problems.length; i++) {\r\n        // Result row. Reset in every loop.\r\n        let ResultRow = \"\";\r\n        NewResultsData[i].forEach((element) => {\r\n            ResultRow += \"<td>\" + element + \"</td>\";\r\n        });\r\n        // Header for each row.\r\n        DataTable += \"<tr>\" + \"<th scope='row'>\" + Problems[i] + \"</th>\" + ResultRow + \"</tr>\";\r\n    }\r\n    DataTable += \"</tbody>\";\r\n    // Create the table element.\r\n    const NewDataTable = document.createElement(\"table\");\r\n    NewDataTable.className = \"table table-bordered table-sm\";\r\n    NewDataTable.id = \"dataTableGenerated\";\r\n    NewDataTable.innerHTML = InstanceSolversThead + ResultThead + DataTable;\r\n    // Add the data to the div.\r\n    DataTableDiv.appendChild(NewDataTable);\r\n    // Create a table search.\r\n    const TableSearch = document.getElementById(\"tableSearch\");\r\n    if (!document.body.contains(TableSearch)) {\r\n        const NewTableSearch = document.createElement('input');\r\n        NewTableSearch.id = \"tableSearch\";\r\n        NewTableSearch.type = \"text\";\r\n        NewTableSearch.className = \"form-control\";\r\n        NewTableSearch.placeholder = \"Search for a problem...\";\r\n        document.getElementById(\"tableFilters\").appendChild(NewTableSearch);\r\n    }\r\n    // Create a download CSV button.\r\n    const DownloadCSVButton = document.getElementById(\"downloadCSVButton\");\r\n    if (!document.body.contains(DownloadCSVButton)) {\r\n        const NewDownloadCSVButton = document.createElement('a');\r\n        NewDownloadCSVButton.id = \"downloadCSVButton\";\r\n        NewDownloadCSVButton.type = \"button\";\r\n        NewDownloadCSVButton.className = \"btn btn-success btn-sm\";\r\n        NewDownloadCSVButton.innerHTML = \"Download CSV\";\r\n        document.getElementById(\"buttonField\").appendChild(NewDownloadCSVButton);\r\n    }\r\n}\r\n","export function TableSearch() {\r\n    const SearchInput = document.getElementById(\"tableSearch\");\r\n    const SearchValue = SearchInput.value.toUpperCase();\r\n    const TableToSearch = document.getElementById(\"dataTableGenerated\");\r\n    const TableRow = TableToSearch.getElementsByTagName(\"tr\");\r\n    let DataCell, FoundProblem;\r\n    // Ignore the two first header rows.\r\n    for (let i = 2; i < TableRow.length; i++) {\r\n        DataCell = TableRow[i].getElementsByTagName(\"th\");\r\n        for (let j = 0; j < DataCell.length; j++) {\r\n            if (DataCell[j].innerHTML.toUpperCase().indexOf(SearchValue) > -1) {\r\n                FoundProblem = true;\r\n            }\r\n        }\r\n        if (FoundProblem) {\r\n            TableRow[i].style.display = \"\";\r\n            FoundProblem = false;\r\n        }\r\n        else {\r\n            TableRow[i].style.display = \"none\";\r\n        }\r\n    }\r\n}\r\n","export function TableDownloadCSV() {\r\n    const DownloadCSVButton = document.getElementById(\"downloadCSVButton\");\r\n    const Table = document.querySelector('#dataTableGenerated');\r\n    const Data = Array.from(Table.rows)\r\n        .map((row) => Array.from(row.cells)\r\n        .map((cell) => cell.innerText)\r\n        .join(','));\r\n    const csv = Data.join('\\n');\r\n    const DownloadableFile = new Blob([csv], { type: 'text/csv' });\r\n    DownloadCSVButton.href = window.URL.createObjectURL(DownloadableFile);\r\n    DownloadCSVButton.download = 'benchmark-table.csv';\r\n    console.log(\"Clicked download.\");\r\n}\r\n","export function CreateChart(Solvers, ResultsData, ComparisonArray) {\r\n    // Create x and y data.\r\n    function CreateXAndYData(LoopCount) {\r\n        let TempData = [];\r\n        let TempData2 = [];\r\n        let IndexOfPrimGap = LoopCount * 8 + 10;\r\n        for (var i = 0; i < ResultsData.length; i++) {\r\n            TempData.push(ResultsData[i][IndexOfPrimGap]);\r\n        }\r\n        for (var i = 0; i < ResultsData.length; i++) {\r\n            TempData2.push({ x: TempData[i], y: i });\r\n        }\r\n        return TempData2;\r\n    }\r\n    // Add a random color for the dataset.\r\n    function PickColor() {\r\n        const Hex = Math.floor(Math.random() * 16777215).toString(16);\r\n        let Color = '#' + Hex;\r\n        return Color;\r\n    }\r\n    // Fetch data for the selected solvers.\r\n    const SelectedSolvers = [];\r\n    for (let i = 0; i < Solvers.length; i++) {\r\n        console.log(\"Status: \", ComparisonArray[i]);\r\n        // Only run if the solvers are used.\r\n        if (ComparisonArray[i] === \"Used\") {\r\n            console.log(\"Creating dataset for: \", Solvers[i]);\r\n            // Push the label and the data to the dataset.\r\n            SelectedSolvers.push({ label: Solvers[i], data: CreateXAndYData(i), backgroundColor: PickColor() });\r\n        }\r\n    }\r\n    console.log(\"Dataset content: \", SelectedSolvers);\r\n    // Dataset to be used in the chart.\r\n    const CreatedDataset = {\r\n        datasets: SelectedSolvers\r\n    };\r\n    // Create the data chart.\r\n    const DataChartElement = document.getElementById('dataChart');\r\n    // @ts-ignore\r\n    const myChart = new Chart(DataChartElement, {\r\n        type: 'scatter',\r\n        data: CreatedDataset,\r\n        //data: { datasets: SelectedSolvers },\r\n        options: {\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Absolute performance profile (PrimalGap)'\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'PrimalGap'\r\n                    }\r\n                },\r\n                y: {\r\n                    //beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Number of instances.'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const ViewPlotsButton = document.getElementById('viewPlotsButton');\r\n    // Destroy the canvas on button click to be able to create a new canvas.\r\n    ViewPlotsButton.addEventListener(\"click\", function () {\r\n        myChart.destroy();\r\n    });\r\n}\r\n"],"names":["GetInstanceAndSolvers","data","TempData2","split","filter","item","i","length","replace","slice","GetProblems","ReturnData","TempData","map","value","document","getElementById","FileInput","ImportDataButton","SelectAllButton","ViewSelectionButton","ViewPlotsButton","RawData","GetCheckedSolvers","FilterSolvers","getElementsByTagName","CheckedSolvers","Solver","checked","push","id","console","log","GetComparisonArray","Solvers","ComparisonArray","includes","addEventListener","querySelectorAll","forEach","solver","remove","_a","disabled","title","SolvedData","Instance","shift","DataLabels","TempData3","GetDataLabels","InstanceLabels","splice","ProblemAndResults","FirstProblem","ProblemList","ResultsData","FilterCheckboxes","createElement","className","FilterLabels","innerText","FilterInput","type","appendChild","TableFilters","click","Problems","NewResultsData","NewDataLabels","element","index","StartLabel","EndLabel","tempArray","ColumnsToUse","EndValue","r","DataTableDiv","innerHTML","InstanceSolversThead","ResultThead","DataTable","ResultRow","NewDataTable","TableSearch","body","contains","NewTableSearch","placeholder","DownloadCSVButton","NewDownloadCSVButton","TableDisplayData","InputSearch","oninput","SearchValue","toUpperCase","TableRow","DataCell","FoundProblem","j","indexOf","style","display","Table","querySelector","csv","Array","from","rows","row","cells","cell","join","DownloadableFile","Blob","href","window","URL","createObjectURL","download","TableDownloadCSV","CreateXAndYData","LoopCount","IndexOfPrimGap","x","y","SelectedSolvers","label","backgroundColor","Math","floor","random","toString","CreatedDataset","datasets","DataChartElement","myChart","Chart","options","plugins","text","scales","destroy","CreateChart","ManageData","Reader","FileReader","lines","result","line","readAsText","files"],"sourceRoot":""}